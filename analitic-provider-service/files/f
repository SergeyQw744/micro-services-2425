String mostPopularProvider = null;
        Map<String, Integer> map = new HashMap<>();
        List<String> originals = new ArrayList<>();
        List<Integer> nums = new ArrayList<>();
        for (int i = 0; i < providers.size(); i++) {
            if (!originals.contains(providers.get(i))) {
                originals.add(providers.get(i));
            }
        }
        for (int i = 0; i< originals.size(); i++) {
            int num = 0;
            for (int j = 0; j < providers.size(); j++) {
                if (originals.get(i).equals(providers.get(j))) {
                    num++;
                }
            }
            nums.add(num);
        }
        for (int i = 0; i < originals.size(); i++) {
            map.put(originals.get(i), nums.get(i));
        }
        for (int i = 0; i < nums.size(); i++) {
            if (Collections.max(nums) == map.get(originals.get(i))){
                mostPopularProvider = originals.get(i);
            }
        }
        return mostPopularProvider;











RequestPercent requestPercent = new RequestPercent();
        Map<String, Integer> map = new HashMap<>();
        List<String> originals = new ArrayList<>();
        List<Integer> nums = new ArrayList<>();
        for (int i = 0; i < requests.size(); i++) {
            if (!originals.contains(requests.get(i))) {
                originals.add(requests.get(i));
            }
        }
        for (int i = 0; i < requests.size(); i++) {
            int num = 0;
            for (int j = 0; j < originals.size(); j++) {
                if (originals.get(i).equals(requests.get(j))) {
                    num++;
                }
            }
            nums.add(num);
        }
        for (int i = 0; i < originals.size(); i++) {
            map.put(originals.get(i), nums.get(i));
        }
        for (int i = 0;i < nums.size(); i++) {
            String requestType = originals.get(i);
            int numRequestType = map.get(requestType);
            double percentValue = (double)(100 * numRequestType) /requests.size();
            switch (requestType) {
                case "POST":
                    requestPercent.setRequestPostPercent(percentValue);
                    break;
                case "GET":
                    requestPercent.setRequestGetPercent(percentValue);
                    break;
                case "DELETE":
                    requestPercent.setRequestDeletePercent(percentValue);
                    break;
            }
        }
        return requestPercent;